The runtime computational environment of the experiment is a rich collection of
active objects. Objects are loosely coupled; they communicate by passing
messages to end points. The system is intended to be completely asynchronous
and loosely-coupled. Some implementation technologies may, however, restrict
the architecture in systematic ways. For example, a runtime may support only
single-threaded event-driven style of communication.

There is a shared channel over which the Experiment, Phase, and Step objects
interact with other objects in the Environment. A typical virtual environment
contains objects that track the runtime state of the experiment, loggers,
analytics monitors, components that assist in grading and evaluating learner's
performance, reactive elements representing the UI and UX of the phases and
steps in an experiment, and such.


Environment { !runExperiment, !quitExperiment, !stopExperiment,
    !resumeExperiment, !saveExperimentState, !restoreExperimentState,
    !goOffline, !goOnline, !resetCounters, !resetTimers, !resetLoggers,
    !resetAnalytics, !resetEvalEngine, }

Learner
    {  ?id, ... }

Experiment
    { run, quit, stop, resume, save, restore, offline, online }

Phase
    { begin, end, stop, resume, seek }

Step
    { begin, end }


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The declarative specification of an experiment should include the following:

Objectives - human readable with keywords that may be indexed.
JavaScript library dependencies - name, version, url, purpose
URLs used in the experiment - REST endpoints, resource locators, ...
Offline support - what the experiment permits while offline.
Phases and Steps - a hierarchical description of each phase and steps within
                   each phase. Each step has a interaction type - audio, video, 
                   interactive (input, output), text, quiz, ...
Priority - tells whether a phase may be skipped depending on the context and
           various parameters.
Supported interfaces - persistent, logging, analytics, offline,...

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 






exp-msg-comm.txt
